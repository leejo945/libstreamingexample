/*
 * Copyright (C) 2011-2015 GUIGUI Simon, fyhertz@gmail.com
 *
 * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.majorkernelpanic.streaming.video;

import android.util.Log;

import java.io.IOException;

import net.majorkernelpanic.streaming.ScreenShareManager;
import net.majorkernelpanic.streaming.exceptions.ConfNotSupportedException;
import net.majorkernelpanic.streaming.gl.SurfaceView;
import net.majorkernelpanic.streaming.rtp.MediaCodecInputStream;

/** 
 * Don't use this class directly.
 */
public abstract class ScreenStream extends VideoStream {

    protected final static String TAG = "ScreenStream";

    @Override
    public void setCamera(int camera) {
        Log.d(TAG, "unused function : setCamera");
    }

    @Override
    public void switchCamera() {
        Log.d(TAG, "unused function : switchCamera");
    }

    @Override
    public synchronized void setSurfaceView(SurfaceView view) {
        Log.d(TAG, "unused function : setSurfaceView");
    }

    @Override
    public synchronized void setFlashState(boolean state) {
        Log.d(TAG, "unused function : setFlashState");
    }

    @Override
    public synchronized void toggleFlash() {
        Log.d(TAG, "unused function : toggleFlash");
    }

    @Override
    public synchronized void start() throws IllegalStateException, IOException {
        if (mDestination == null) throw new IllegalStateException("No destination ip address set for the stream !");

        if (mRtpPort <= 0 || mRtcpPort <= 0) throw new IllegalStateException("No destination ports set for the stream !");

        mPacketizer.setTimeToLive(mTTL);

        //if (mMode != MODE_MEDIARECORDER_API) {
        mMode = MODE_MEDIARECORDER_API;
        encodeWithMediaCodec();
        //} else {
        //    encodeWithMediaRecorder();
        //}
    }

    @Override
    public synchronized void stop() {
        if (mStreaming) {
            try {
                if (mMode == MODE_MEDIARECORDER_API) {
                    mMediaRecorder.stop();
                    mMediaRecorder.release();
                    mMediaRecorder = null;
                    closeSockets();
                    mPacketizer.stop();
                } else {
                    mPacketizer.stop();
                    mMediaCodec.stop();
                    mMediaCodec.release();
                    mMediaCodec = null;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            mStreaming = false;
        }
    }

    @Override
    public synchronized void startPreview() {
        Log.d(TAG, "unused function : startPreview");
    }

    @Override
    protected void encodeWithMediaRecorder() throws IOException, ConfNotSupportedException {
        //throw new ConfNotSupportedException("not support encodeWithMediaRecorder");
        Log.d(TAG, "Video encoded using the MediaCodec API with a buffer");
        mMediaCodec = ScreenShareManager.getInstance().createMediaCodec(mQuality);
        mPacketizer.setInputStream(new MediaCodecInputStream(mMediaCodec));
        mPacketizer.start();

        mStreaming = true;
    }

    @Override
    protected void encodeWithMediaCodecMethod1() throws RuntimeException, IOException {
        Log.d(TAG, "Video encoded using the MediaCodec API with a buffer");
        mMediaCodec = ScreenShareManager.getInstance().createMediaCodec(mQuality);
        MediaCodecInputStream mis =  new MediaCodecInputStream(mMediaCodec);
        Log.d(TAG, " mis.hashCode : " + mis.hashCode());
        mPacketizer.setInputStream(mis);
        mPacketizer.start();

        mStreaming = true;
    }

    @Override
    protected void encodeWithMediaCodecMethod2() throws RuntimeException, IOException {
        Log.d(TAG, "Video encoded using the MediaCodec API with a surface");

        mMediaCodec = ScreenShareManager.getInstance().createMediaCodec(mQuality);

        // The packetizer encapsulates the bit stream in an RTP stream and send it over the network
        mPacketizer.setInputStream(new MediaCodecInputStream(mMediaCodec));
        mPacketizer.start();

        mStreaming = true;
    }

    @Override
    protected synchronized void createCamera() throws RuntimeException {
        Log.d(TAG, "unused function : createCamera");
    }

    @Override
    protected synchronized void destroyCamera() {
        Log.d(TAG, "unused function : destroyCamera");
    }

    @Override
    protected synchronized void updateCamera() throws RuntimeException {
        Log.d(TAG, "unused function : updateCamera");
    }

    @Override
    protected void lockCamera() {
        Log.d(TAG, "unused function : lockCamera");
    }

    @Override
    protected void unlockCamera() {
        Log.d(TAG, "unused function : unlockCamera");
    }
}
