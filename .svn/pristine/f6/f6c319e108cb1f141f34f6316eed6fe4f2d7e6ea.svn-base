package net.majorkernelpanic.example1;

import java.io.IOException;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;

import org.apache.http.conn.util.InetAddressUtils;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences.Editor;
import android.content.pm.ActivityInfo;
import android.media.MediaPlayer;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Environment;
import android.os.Process;
import android.preference.PreferenceManager;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.TextView;
import net.majorkernelpanic.streaming.ScreenShareManager;
import net.majorkernelpanic.streaming.SessionBuilder;
import net.majorkernelpanic.streaming.gl.SurfaceView;
import net.majorkernelpanic.streaming.rtp.RtpSocket;
import net.majorkernelpanic.streaming.rtsp.RtspServer;
import net.majorkernelpanic.streaming.video.VideoQuality;

/**
 * A straightforward example of how to use the RTSP server included in libstreaming.
 */
public class MainActivity extends Activity {

    //private SurfaceView mSurfaceView;
	  TextView tv = null;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
//        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        
//        SurfaceView mSurfaceView = null;
        Button button1 = null;
        
        
        setContentView(R.layout.activity_main);
        
        ScreenShareManager.setup(this);
//        android.view.SurfaceView surfaceView =  (android.view.SurfaceView) findViewById(R.id.surfaceView1);
//        SurfaceHolder surfaceHolder = surfaceView.getHolder();
//        
//        
//       final MediaPlayer  mediaPlayer = new MediaPlayer();
//       
//       mediaPlayer.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
//           @Override
//           public void onPrepared(MediaPlayer mp) {
//               //准备完成后播放
//               mediaPlayer.start();
//           }
//       });
//       
//        surfaceHolder.addCallback(new SurfaceHolder.Callback() {
//
//			@Override
//			public void surfaceChanged(SurfaceHolder holder, int format,
//					int width, int height) {
//				// TODO Auto-generated method stub
//			
//			}
//
//			@Override
//			public void surfaceCreated(SurfaceHolder holder) {
//				 mediaPlayer.reset();
//	                try {
//	                //设置视屏文件图像的显示参数
//	                mediaPlayer.setDisplay(holder);
//	                
//	                //file.getAbsolutePath()本地视频
//	                //uri 网络视频
//	                String SAMPLE = Environment.getExternalStorageDirectory() + "/Coagent/t1.mp4";
//	               // mediaPlayer.setDataSource(MainActivity.this, Uri.parse(""));
//	                mediaPlayer.setDataSource(SAMPLE);
//	                //prepare();表示准备工作同步进行，（准备工作在UI线程中进行）
//	                //当播放网络视频时，如果网络不要 会报ARN 所以不采用该方法
//	                //mediaPlayer.prepare();
//	                //异步准备 准备工作在子线程中进行 当播放网络视频时候一般采用此方法
//	                mediaPlayer.prepareAsync();
//	                } catch (IOException e) {
//	                    e.printStackTrace();
//	                }
//	                
//			}
//
//			@Override
//			public void surfaceDestroyed(SurfaceHolder holder) {
//				 if (mediaPlayer!=null) {
//	                    mediaPlayer.stop();
//	                    //释放资源
//	                    mediaPlayer.release();
//	              }
//				
//			}
//        	
//        });
        
        
        
        
        
        
        
        
        
//        mSurfaceView = (SurfaceView) findViewById(R.id.surface);
        button1 =  (Button)findViewById(R.id.button1);
        tv = (TextView) findViewById(R.id.textView1);
        
        
        
        
        
//        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);

      

        //((TextView)findViewById(R.id.ip)).setText(getIPAddress(this));
        
      
        // Sets the port of the RTSP server to 1234
//        Editor editor = PreferenceManager.getDefaultSharedPreferences(this).edit();
//        editor.putString(RtspServer.KEY_PORT, String.valueOf(8787));
//        editor.commit();
         
        // Configures the SessionBuilder
        SessionBuilder
                .getInstance()
                //.setSurfaceView(mSurfaceView)
                //.setPreviewOrientation(90)
                .setVideoQuality(new VideoQuality(800, 480, 10, 1024000))
                .setContext(getApplicationContext())
              //  .setAudioEncoder(SessionBuilder.AUDIO_NONE)
                //.setVideoEncoder(SessionBuilder.VIDEO_H263_SCREEN_SHARE);
                .setVideoEncoder(SessionBuilder.VIDEO_H264_SCREEN_SHARE);

        

		// Configures the SessionBuilder
//		SessionBuilder.getInstance()
//		.setSurfaceView(mSurfaceView)
//		.setPreviewOrientation(90)
//		.setContext(getApplicationContext())
//		.setAudioEncoder(SessionBuilder.AUDIO_NONE)
//		.setVideoEncoder(SessionBuilder.VIDEO_H264);
		
        
        
        
        // Starts the RTSP server
        this.startService(new Intent(this, RtspServer.class));

        
        
        new Timer().scheduleAtFixedRate(new TimerTask() {
			
			@Override
			public void run() {
				// TODO Auto-generated method stub
				runOnUiThread( new Runnable() {
					public void run() {
						 tv.setText(new Date().toLocaleString());
					}
				});
			}
		}, 0, 1000);
        
        
        button1.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				
				Log.e("setOnClickListener", RtpSocket.sb.toString());
				
				Process.killProcess(Process.myPid());
			}
		});
    }

    
    
    
    
	public   String getIPAddress(Context context) {
		String ip = null;  
		ConnectivityManager conMann = (ConnectivityManager)   
		                this.getSystemService(Context.CONNECTIVITY_SERVICE);  
		            NetworkInfo mobileNetworkInfo = conMann.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);  
		            NetworkInfo wifiNetworkInfo = conMann.getNetworkInfo(ConnectivityManager.TYPE_WIFI);  
		          
		        if (mobileNetworkInfo.isConnected()) {  
		            ip = getLocalIpAddress();     
		            System.out.println("本地ip-----"+ip);  
		        }else if(wifiNetworkInfo.isConnected())  
		        {  
		            WifiManager wifiManager = (WifiManager) getSystemService(Context.WIFI_SERVICE);    
		            WifiInfo wifiInfo = wifiManager.getConnectionInfo();         
		            int ipAddress = wifiInfo.getIpAddress();     
		            ip = intToIp(ipAddress);   
		            System.out.println("wifi_ip地址为------"+ip);  
		        }   
		        return ip;
    }
	public String getLocalIpAddress() {    
        try {    
            String ipv4;    
            ArrayList<NetworkInterface>  nilist = Collections.list(NetworkInterface.getNetworkInterfaces());    
            for (NetworkInterface ni: nilist)     
            {    
                ArrayList<InetAddress>  ialist = Collections.list(ni.getInetAddresses());    
                for (InetAddress address: ialist){    
                    if (!address.isLoopbackAddress() && InetAddressUtils.isIPv4Address(ipv4=address.getHostAddress()))     
                    {     
                        return ipv4;    
                    }    
                }    
     
            }    
     
        } catch (SocketException ex) {    
            Log.e("localip", ex.toString());    
        }    
        return null;    
    }  
	public static String intToIp(int ipInt) {    
        StringBuilder sb = new StringBuilder();    
        sb.append(ipInt & 0xFF).append(".");    
        sb.append((ipInt >> 8) & 0xFF).append(".");    
        sb.append((ipInt >> 16) & 0xFF).append(".");    
        sb.append((ipInt >> 24) & 0xFF);    
        return sb.toString();    
    }   
}
