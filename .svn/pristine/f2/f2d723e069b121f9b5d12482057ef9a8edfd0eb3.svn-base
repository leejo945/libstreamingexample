/*
 * Copyright (C) 2011-2015 GUIGUI Simon, fyhertz@gmail.com
 *
 * This file is part of libstreaming (https://github.com/fyhertz/libstreaming)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package net.majorkernelpanic.streaming.rtp;

import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.Random;

import net.majorkernelpanic.example1.SLog;
import net.majorkernelpanic.example1.Util;
import net.majorkernelpanic.streaming.rtsp.RtspServer;

import android.annotation.SuppressLint;
import android.media.MediaCodec;
import android.media.MediaCodec.BufferInfo;
import android.media.MediaFormat;
import android.util.Log;

/**
 * An InputStream that uses data from a MediaCodec.
 * The purpose of this class is to interface existing RTP packetizers of
 * libstreaming with the new MediaCodec API. This class is not thread safe !  
 */
@SuppressLint("NewApi")
public class MediaCodecInputStream extends InputStream {

	public final String TAG = "MediaCodecInputStream"; 

	private MediaCodec mMediaCodec = null;
	private BufferInfo mBufferInfo = new BufferInfo();
	private ByteBuffer[] mBuffers = null;
	private ByteBuffer mBuffer = null;
	private int mIndex = -1;
	private boolean mClosed = false;
	
	public MediaFormat mMediaFormat;

	public MediaCodecInputStream(MediaCodec mediaCodec) {
		mMediaCodec = mediaCodec;
		mBuffers = mMediaCodec.getOutputBuffers();
//	    Log.d(TAG, "MediaCodecInputStreamgetOutputBuffers"   + Arrays.toString(mBuffers));
//	    for(ByteBuffer buffer:mBuffers){
//	    	  Log.d(TAG, "MediaCodecInputStreamgetOutputBuffers"   + buffer.capacity()
//	    			  
//	    			  +" "+ Arrays.toString(buffer.array())
//	    			  );
//	    }
	    
	 
	}

	@Override
	public void close() {
		mClosed = true;
	}

	@Override
	public int read() throws IOException {
		return 0;
	}
	boolean interrupted = false;
	@Override
	public int read(byte[] buffer, int offset, int length) throws IOException {
		int min = 0;

		try {
			if (mBuffer==null) {
			
				while ((interrupted=!Thread.interrupted()) && !mClosed) {
					mIndex = mMediaCodec.dequeueOutputBuffer(mBufferInfo, 500000);
				     
					
					if (mIndex>=0 ){
						mBuffer = mBuffers[mIndex];
//						byte time = (byte)(System.currentTimeMillis()%100);
//						Log.d("", "nextIntnextInt  i   "  +time);
//						mBuffer.put(mBuffer.capacity()-1,time);
						mBuffer.position(0);
						try{
							if(SLog.IS_ENABLE2){
								
//  								 byte[] m2  =  new byte[n];
// 								 if(mBuffer.hasArray()){
// 									 
// 									 mBuffer.get(m2, 6, 7);
// 									 SLog.d("toString","********获取时间*********");
// 								 }
								
								
//	 							
//	 							 String str = Arrays.toString(m2);
//	 							 RtpSocket.stringBuffer.append(str+"\n");
	 							// SLog.d("toString","************************");
//								byte[]  bbb = mBuffer.array();
//								mBuffer.get(m2, 0, n);
//								 SLog.d("toString","shuju   "+ Arrays.toString(m2));
// 								 
	 							 ///SLog.d("toString","shuju   "+Arrays.toString());
	 							//  SLog.d("toString", Util.md5Password(str));
	 							// SLog.d("toString","************************");
	 							}
//								
//							}
						}catch(Exception e){
							 SLog.d("toString","shuju Exception  "+e.toString());
						}
			
						
						
						
						break;
					} else if (mIndex == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
						mBuffers = mMediaCodec.getOutputBuffers();
					} else if (mIndex == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
						mMediaFormat = mMediaCodec.getOutputFormat();
						//Log.i(TAG,mMediaFormat.toString());
					} else if (mIndex == MediaCodec.INFO_TRY_AGAIN_LATER) {
						//没有数据的时候就上次的数据吧
						 Log.v(TAG,"No buffer available...");
						//return 0;
					} else {
						//Log.e(TAG,"Message: "+mIndex);
						//return 0;
					}
					
				//	Log.d(TAG, "getOutputBuffers   mBuffer"   +   mBuffer.array());
					
				}			
			}
			
		
			if (mClosed) throw new IOException("This InputStream was closed");
			
			/**
			 * 上面  dequeueOutputBuffer  得到的index 只要大于或者等于0  上面的while 循环就跳出了，执行到这里
			 */
			//这里判断一下需要的长度length  和实际的长度做一下判断，不能越界
			min = length < mBufferInfo.size - mBuffer.position() ? length : mBufferInfo.size - mBuffer.position(); 
			
			//将mBuffer里面的数据全部填满buffer中
			mBuffer.get(buffer, offset, min);
			
			if(SLog.IS_ENABLE2)
			 	SLog.e(TAG, "readdata   "+ Arrays.toString(buffer));
			
			
			if (mBuffer.position()>=mBufferInfo.size) {
				mMediaCodec.releaseOutputBuffer(mIndex, false);
				mBuffer = null;
			}
			
		} catch (RuntimeException e) {
			e.printStackTrace();
		}

		return min;
	}
	public static  int n  =  10;
	
	private int lastResult = -1;
	public int available() {
		if (mBuffer != null) {
			
			int size = mBufferInfo.size;
			int position =  mBuffer.position();
			SLog.d("", "available  size:" + size  +"   position:" + position);
			int result = size -position;
//			if(mIndex!=-1){
//				lastResult = result;
//				return result;
//			}else{
//				return lastResult;
//			}
//			
			 return  result;
		}
		else 
			return 0;
	}

	public BufferInfo getLastBufferInfo() {
		return mBufferInfo;
	}

}
